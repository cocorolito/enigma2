# uncompyle6 version 3.5.1
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.16 (default, Jun  5 2020, 22:59:21) 
# [GCC 4.2.1 Compatible Apple LLVM 11.0.3 (clang-1103.0.29.20) (-macos10.15-objc-
# Embedded file name: /usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/AutoTimer.py
# Compiled at: 2019-08-17 14:09:41
from __future__ import print_function
from . import _
from xml.etree.cElementTree import parse as cet_parse, fromstring as cet_fromstring
from os import path as os_path, rename as os_rename
from AutoTimerConfiguration import parseConfig, buildConfig
import Components.Task, NavigationInstance
from ServiceReference import ServiceReference
from RecordTimer import RecordTimerEntry
from Tools.Notifications import AddPopup
from Screens import Standby
from Screens.MessageBox import MessageBox
from time import localtime, strftime, time, mktime, sleep, ctime
from datetime import timedelta, date
from Tools.FuzzyDate import FuzzyTime
from enigma import eEPGCache, eServiceReference, eServiceCenter, iServiceInformation
from AutoTimerComponent import preferredAutoTimerComponent
from itertools import chain
from collections import defaultdict
from difflib import SequenceMatcher
from operator import itemgetter
from Plugins.SystemPlugins.Toolkit.SimpleThread import SimpleThread
try:
    from Plugins.Extensions.SeriesPlugin.plugin import renameTimer
except ImportError as ie:
    renameTimer = None

from . import config, xrange, itervalues
XML_CONFIG = '/etc/enigma2/autotimer.xml'
TAG = 'AutoTimer'
NOTIFICATIONID = 'AutoTimerNotification'
CONFLICTNOTIFICATIONID = 'AutoTimerConflictEncounteredNotification'
SIMILARNOTIFICATIONID = 'AutoTimerSimilarUsedNotification'


def timeSimilarityPercent(rtimer, evtBegin, evtEnd, timer=None):
    if timer is not None and timer.offset is not None:
        rtimerBegin = rtimer.begin + timer.offset[0]
        rtimerEnd = rtimer.end - timer.offset[1]
    else:
        rtimerBegin = rtimer.begin + config.recording.margin_before.value * 60
        rtimerEnd = rtimer.end - config.recording.margin_after.value * 60
    if rtimerBegin <= evtBegin and evtEnd <= rtimerEnd:
        commonTime = evtEnd - evtBegin
    elif evtBegin <= rtimerBegin and rtimerEnd <= evtEnd:
        commonTime = rtimerEnd - rtimerBegin
    elif evtBegin <= rtimerBegin <= evtEnd:
        commonTime = evtEnd - rtimerBegin
    elif rtimerBegin <= evtBegin <= rtimerEnd:
        commonTime = rtimerEnd - evtBegin
    else:
        commonTime = 0
    if evtBegin != evtEnd:
        commonTime_percent = 100 * commonTime / (evtEnd - evtBegin)
    else:
        return 0
    if rtimerEnd != rtimerBegin:
        durationMatch_percent = 100 * (evtEnd - evtBegin) / (rtimerEnd - rtimerBegin)
    else:
        return 0
    if durationMatch_percent < commonTime_percent:
        return durationMatch_percent
    else:
        return commonTime_percent
        return


typeMap = {'exact': 1, 'partial': 2, 'description': 3, 'start': 4}
caseMap = {'sensitive': 0, 'insensitive': 1}

class AutoTimer:

    def __init__(self):
        self.timers = []
        self.configMtime = -1
        self.uniqueTimerId = 0
        self.defaultTimer = preferredAutoTimerComponent(0, '', '', True)

    def readXml(self, **kwargs):
        if 'xml_string' in kwargs:
            self.configMtime = -1
            configuration = cet_fromstring(kwargs['xml_string'])
        elif not os_path.exists(XML_CONFIG):
            print('[AutoTimer] No configuration file present')
            return
        mtime = os_path.getmtime(XML_CONFIG)
        if mtime == self.configMtime:
            print("[AutoTimer] No changes in configuration, won't parse")
            return
        else:
            self.configMtime = mtime
            try:
                configuration = cet_parse(XML_CONFIG).getroot()
            except:
                try:
                    if os_path.exists(XML_CONFIG + '_old'):
                        os_rename(XML_CONFIG + '_old', XML_CONFIG + '_old(1)')
                    os_rename(XML_CONFIG, XML_CONFIG + '_old')
                    print('[AutoTimer] autotimer.xml is corrupt rename file to /etc/enigma2/autotimer.xml_old')
                except:
                    pass
                else:
                    if Standby.inStandby is None:
                        AddPopup(_('The autotimer file (/etc/enigma2/autotimer.xml) is corrupt. A new and empty config was created. A backup of the config can be found here (/etc/enigma2/autotimer.xml_old) '), type=MessageBox.TYPE_ERROR, timeout=0, id='AutoTimerLoadFailed')
                    self.timers = []
                    self.defaultTimer = preferredAutoTimerComponent(0, '', '', True)
                    try:
                        self.writeXml()
                        configuration = cet_parse(XML_CONFIG).getroot()
                    except:
                        print('[AutoTimer] fatal error, the autotimer.xml cannot create')
                        return

            del self.timers[:]
            self.defaultTimer.clear(-1, True)
            parseConfig(configuration, self.timers, configuration.get('version'), 0, self.defaultTimer)
            self.uniqueTimerId = len(self.timers)
            return

    def getXml(self, webif=True):
        return buildConfig(self.defaultTimer, self.timers, webif)

    def writeXml(self):
        file = open(XML_CONFIG, 'w')
        file.writelines(buildConfig(self.defaultTimer, self.timers))
        file.close()

    def writeXmlTimer(self, timers):
        return ('').join(buildConfig(self.defaultTimer, timers))

    def readXmlTimer(self, xml_string):
        configuration = cet_fromstring(xml_string)
        parseConfig(configuration, self.timers, configuration.get('version'), self.uniqueTimerId, self.defaultTimer)
        self.uniqueTimerId += 1
        self.configMtime = -1

    def add(self, timer):
        self.timers.append(timer)

    def getEnabledTimerList(self):
        return sorted([ x for x in self.timers if x.enabled ], key=lambda x: x.name)

    def getTimerList(self):
        return self.timers

    def getTupleTimerList(self):
        lst = self.timers
        return [ (x,) for x in lst ]

    def getSortedTupleTimerList(self):
        lst = self.timers[:]
        lst.sort()
        return [ (x,) for x in lst ]

    def getUniqueId(self):
        self.uniqueTimerId += 1
        return self.uniqueTimerId

    def remove(self, uniqueId):
        idx = 0
        for timer in self.timers:
            if timer.id == uniqueId:
                self.timers.pop(idx)
                return
            idx += 1

    def set(self, timer):
        idx = 0
        for stimer in self.timers:
            if stimer == timer:
                self.timers[idx] = timer
                return
            idx += 1

        self.timers.append(timer)

    def parseEPGAsync(self, simulateOnly=False):
        t = SimpleThread(lambda : self.parseEPG(simulateOnly=simulateOnly))
        t.start()
        return t.deferred

    def parseEPG(self, autoPoll=False, simulateOnly=False, callback=None):
        self.autoPoll = autoPoll
        self.simulateOnly = simulateOnly
        self.new = 0
        self.modified = 0
        self.skipped = []
        self.existing = []
        self.total = 0
        self.autotimers = []
        self.conflicting = []
        self.similars = []
        self.callback = callback
        delta = timedelta(days=config.plugins.autotimer.maxdaysinfuture.getValue() + 1)
        self.evtLimit = mktime((date.today() + delta).timetuple())
        self.checkEvtLimit = delta.days > 1
        del delta
        self.readXml()
        self.epgcache = eEPGCache.getInstance()
        self.serviceHandler = eServiceCenter.getInstance()
        self.recordHandler = NavigationInstance.instance.RecordTimer
        self.timerdict = defaultdict(list)
        self.populateTimerdict(self.epgcache, self.recordHandler, self.timerdict)
        self.moviedict = defaultdict(list)
        Components.Task.job_manager.AddJob(self.createTask())

    def createTask(self):
        self.timer_count = 0
        self.completed = []
        self.searchtimer = []
        job = Components.Task.Job(_('AutoTimer'))
        timer = None
        for timer in self.getEnabledTimerList():
            taskname = timer.name + '_%d' % self.timer_count
            task = Components.Task.PythonTask(job, taskname)
            self.searchtimer.append((timer, taskname))
            task.work = self.JobStart
            task.weighting = 1
            self.timer_count += 1

        if timer:
            task = Components.Task.PythonTask(job, 'Show results')
            task.work = self.JobMessage
            task.weighting = 1
        return job

    def JobStart(self):
        for timer, taskname in self.searchtimer:
            if taskname not in self.completed:
                self.parseTimer(timer, self.epgcache, self.serviceHandler, self.recordHandler, self.checkEvtLimit, self.evtLimit, self.autotimers, self.conflicting, self.similars, self.skipped, self.existing, self.timerdict, self.moviedict, taskname, self.simulateOnly)
                self.new += self.result[0]
                self.modified += self.result[1]
                break

    def parseTimer(self, timer, epgcache, serviceHandler, recordHandler, checkEvtLimit, evtLimit, timers, conflicting, similars, skipped, existing, timerdict, moviedict, taskname, simulateOnly=False):
        def getNonSearchableEvents(servicelist):
            servicelist.insert(0, 'RITBDSE')
            allevents = epgcache.lookupEvent(servicelist) or []
            if timer.searchType == 'exact':
                for serviceref, eit, name, begin, duration, shortdesc, extdesc in allevents:
                    if match == (name if casesensitive else name.lower()):
                        epgmatches.append((serviceref, eit, name, begin, duration, shortdesc, extdesc))
            elif timer.searchType == 'partial':
                for serviceref, eit, name, begin, duration, shortdesc, extdesc in allevents:
                    if match in (name if casesensitive else name.lower()):
                        epgmatches.append((serviceref, eit, name, begin, duration, shortdesc, extdesc))
            elif timer.searchType == 'description':
                for serviceref, eit, name, begin, duration, shortdesc, extdesc in allevents:
                    if match in (shortdesc if casesensitive else shortdesc.lower()) or match in (extdesc if casesensitive else extdesc.lower()):
                        epgmatches.append((serviceref, eit, name, begin, duration, shortdesc, extdesc))
            elif timer.searchType == 'start':
                for serviceref, eit, name, begin, duration, shortdesc, extdesc in allevents:
                    if (name if casesensitive else name.lower()).startswith(match):
                        epgmatches.append((serviceref, eit, name, begin, duration, shortdesc, extdesc))
            else:
                print('Invalid search type! %s\n' % timer.searchType)

        new = 0
        modified = 0
        enable_multiple_timer = timer.services and 's' in config.plugins.autotimer.enable_multiple_timer.value or False or timer.bouquets and 'b' in config.plugins.autotimer.enable_multiple_timer.value or False
        dest = timer.destination or config.usage.default_path.value
        match = timer.match.replace('\xc2\x86', '').replace('\xc2\x87', '')
        if timer.encoding != 'UTF-8':
            try:
                match = match.decode('UTF-8').encode(timer.encoding)
            except UnicodeDecodeError:
                pass

        epgmatches = []
        casesensitive = timer.searchCase == 'sensitive'
        if not casesensitive:
            match = match.lower()
        test = []
        bouquetlist = []
        if timer.services:
            test = [ (service, 0, -1, -1) for service in timer.services ]
        elif timer.bouquets:
            bouquetlist = timer.bouquets
        else:
            refstr = '1:134:1:0:0:0:0:0:0:0:FROM BOUQUET "bouquets.tv" ORDER BY bouquet'
            bouquetroot = eServiceReference(refstr)
            mask = eServiceReference.isDirectory
            if config.usage.multibouquet.value:
                bouquets = serviceHandler.list(bouquetroot)
                if bouquets:
                    while True:
                        s = bouquets.getNext()
                        if not s.valid():
                            break
                        if s.flags & mask:
                            info = serviceHandler.info(s)
                            if info:
                                bouquetlist.append(s)

            else:
                info = serviceHandler.info(bouquetroot)
                if info:
                    bouquetlist.append(bouquetroot)
                    
        if test:
            getNonSearchableEvents(test)

        for bouquet in bouquetlist:
            test = []
            if type(bouquet) == str:
                bouquet = eServiceReference(bouquet)
            services = serviceHandler.list(bouquet)
            if services:
                service = services.getNext()
                while service.valid():
                    playable = not service.flags & (eServiceReference.isMarker | eServiceReference.isDirectory) or service.flags & eServiceReference.isNumberedMarker
                    if playable:
                        sname = service.toString()
                        pos = sname.rfind(':')
                        if pos != -1:
                            if sname[pos-1] == ':':
                                pos -= 1
                            sname = sname[:pos+1]
                        test.append((sname, 0, -1, -1))
                    service = services.getNext()
            getNonSearchableEvents(test)
        
        epgmatches.extend(epgcache.search(('RITBDSE', 3000, typeMap[timer.searchType], match, caseMap[timer.searchCase])) or [])
        epgmatches.sort(key=itemgetter(3))
        similardict = defaultdict(list)
        preveit = False
        for idx, (serviceref, eit, name, begin, duration, shortdesc, extdesc) in enumerate(epgmatches):
            eserviceref = eServiceReference(serviceref)
            evt = epgcache.lookupEventId(eserviceref, eit)
            evtBegin = begin
            evtEnd = end = begin + duration
            if not evt:
                msg = '[AutoTimer] Could not create Event!'
                print(msg)
                skipped.append((name, begin, end, str(serviceref), timer.name, msg))
                continue
            n = evt.getNumOfLinkageServices()
            if n > 0:
                i = evt.getLinkageService(eserviceref, n - 1)
                serviceref = i.toString()
            if not shortdesc:
                shortdesc = extdesc
            timestamp = localtime(begin)
            timer.update(begin, timestamp)
            similarTimer = False
            if eit in similardict:
                similarTimer = True
                dayofweek = None
            elif checkEvtLimit:
                if begin > evtLimit:
                    msg = '[AutoTimer] Skipping an event because of maximum days in future is reached'
                    skipped.append((name, begin, end, serviceref, timer.name, msg))
                    continue
            else:
                dayofweek = str(timestamp.tm_wday)

            if timer.checkServices(serviceref) or timer.checkDuration(duration) or not similarTimer and (timer.checkTimespan(timestamp) or timer.checkTimeframe(begin)) or timer.checkFilter(name, shortdesc, extdesc, dayofweek):
                msg = '[AutoTimer] Skipping an event because of filter check'
                skipped.append((name, begin, end, serviceref, timer.name, msg))
                continue
            if timer.hasOffset():
                begin, end = timer.applyOffset(begin, end)
                offsetBegin = timer.offset[0]
                offsetEnd = timer.offset[1]
            else:
                begin -= config.recording.margin_before.value * 60
                end += config.recording.margin_after.value * 60
                offsetBegin = config.recording.margin_before.value * 60
                offsetEnd = config.recording.margin_after.value * 60
            if timer.justplay and not timer.setEndtime:
                end = begin
            if timer.overrideAlternatives:
                serviceref = timer.getAlternative(serviceref)
            timers.append((name, begin, end, serviceref, timer.name))
            if simulateOnly:
                continue
            if timer.avoidDuplicateDescription == 3:
                movieExists = False
                if dest and dest not in moviedict:
                    self.addDirectoryToMovieDict(moviedict, dest, serviceHandler)
                for movieinfo in moviedict.get(dest, ()):
                    if self.checkSimilarity(timer, name, movieinfo.get('name'), shortdesc, movieinfo.get('shortdesc'), extdesc, movieinfo.get('extdesc')):
                        print('[AutoTimer] We found a matching recorded movie, skipping event:', name)
                        movieExists = True
                        break

                if movieExists:
                    msg = '[AutoTimer] Skipping an event because movie already exists'
                    skipped.append((name, begin, end, serviceref, timer.name, msg))
                    continue
            newEntry = None
            oldExists = False
            for rtimer in timerdict.get(serviceref, ()):
                if rtimer.eit == eit or config.plugins.autotimer.try_guessing.getValue() and timeSimilarityPercent(rtimer, evtBegin, evtEnd, timer) > 80:
                    oldExists = True
                    if config.plugins.autotimer.refresh.value == 'none' or rtimer.repeated:
                        break
                    if eit == preveit:
                        break
                    if evtBegin - offsetBegin != rtimer.begin or evtEnd + offsetEnd != rtimer.end or shortdesc != rtimer.description:
                        if rtimer.isAutoTimer and eit == rtimer.eit:
                            print('[AutoTimer] AutoTimer %s modified this automatically generated timer.' % timer.name)
                            preveit = eit
                        elif config.plugins.autotimer.refresh.getValue() != 'all':
                            print("[AutoTimer] Won't modify existing timer because it's no timer set by us")
                            break
                        else:
                            rtimer.log(501, '[AutoTimer] Warning, AutoTimer %s messed with a timer which might not belong to it: %s .' % (timer.name, rtimer.name))

                        newEntry = rtimer
                        modified += 1
                        self.modifyTimer(rtimer, name, shortdesc, begin, end, serviceref, eit)
                        break
                    else:
                        existing.append((name, begin, end, serviceref, timer.name))
                        break
                elif timer.avoidDuplicateDescription >= 1 and not rtimer.disabled:
                    if self.checkSimilarity(timer, name, rtimer.name, shortdesc, rtimer.description, extdesc, rtimer.extdesc):
                        print('[AutoTimer] We found a timer with similar description, skipping event')
                        oldExists = True
                        break

            if newEntry is None:
                if oldExists:
                    continue
                for rtimer in chain.from_iterable(itervalues(timerdict)):
                    if not rtimer.disabled:
                        if self.checkDoubleTimers(timer, name, rtimer.name, begin, rtimer.begin, end, rtimer.end, serviceref, str(rtimer.service_ref), enable_multiple_timer):
                            oldExists = True
                            print('[AutoTimer] We found a timer with same StartTime, skipping event')
                            break
                        if timer.avoidDuplicateDescription >= 2:
                            if self.checkSimilarity(timer, name, rtimer.name, shortdesc, rtimer.description, extdesc, rtimer.extdesc):
                                oldExists = True
                                break

                if oldExists:
                    continue
                if timer.checkCounter(timestamp):
                    print('[AutoTimer] Not adding new timer because counter is depleted.')
                    continue
                newEntry = RecordTimerEntry(ServiceReference(serviceref), begin, end, name, shortdesc, eit)
                newEntry.log(500, '[AutoTimer] Try to add new timer based on AutoTimer %s.' % timer.name)
                newEntry.log(509, '[AutoTimer] Timer start on: %s' % ctime(begin))
                newEntry.isAutoTimer = True
            if timer.hasAfterEvent():
                afterEvent = timer.getAfterEventTimespan(localtime(end))
                if afterEvent is None:
                    afterEvent = timer.getAfterEvent()
                if afterEvent is not None:
                    newEntry.afterEvent = afterEvent
            newEntry.dirname = timer.destination
            newEntry.justplay = timer.justplay
            newEntry.vpsplugin_enabled = timer.vps_enabled
            newEntry.vpsplugin_overwrite = timer.vps_overwrite
            if hasattr(timer, 'always_zap') and hasattr(newEntry, 'always_zap'):
                newEntry.always_zap = timer.always_zap
            tags = timer.tags[:]
            if config.plugins.autotimer.add_autotimer_to_tags.value:
                if TAG not in tags:
                    tags.append(TAG)
            if config.plugins.autotimer.add_name_to_tags.value:
                tagname = timer.name.strip()
                if tagname:
                    tagname = tagname[0].upper() + tagname[1:].replace(' ', '_')
                    if tagname not in tags:
                        tags.append(tagname)
            newEntry.tags = tags
            if oldExists:
                recordHandler.timeChanged(newEntry)
                if renameTimer is not None and timer.series_labeling:
                    renameTimer(newEntry, name, evtBegin, evtEnd)
            else:
                conflictString = ''
                if similarTimer:
                    conflictString = similardict[eit].conflictString
                    msg = '[AutoTimer] Try to add similar Timer because of conflicts with %s.' % conflictString
                    print(msg)
                    newEntry.log(504, msg)
                conflicts = recordHandler.record(newEntry)
                if conflicts and not timer.hasOffset() and not config.recording.margin_before.value and not config.recording.margin_after.value and len(conflicts) > 1:
                    change_end = change_begin = False
                    conflict_begin = conflicts[1].begin
                    conflict_end = conflicts[1].end
                    if conflict_begin == newEntry.end:
                        newEntry.end -= 30
                        change_end = True
                    elif newEntry.begin == conflict_end:
                        newEntry.begin += 30
                        change_begin = True
                    if change_end or change_begin:
                        conflicts = recordHandler.record(newEntry)
                        if conflicts:
                            if change_end:
                                newEntry.end += 30
                            elif change_begin:
                                newEntry.begin -= 30
                        else:
                            print('[AutoTimer] The conflict is resolved by offset time begin/end (30 sec) for %s.' % newEntry.name)
                if conflicts:
                    conflictString += (' / ').join([ '%s (%s)' % (x.name, strftime('%Y%m%d %H%M', localtime(x.begin))) for x in conflicts ])
                    print('[AutoTimer] conflict with %s detected' % conflictString)
                    if config.plugins.autotimer.addsimilar_on_conflict.value:
                        lepgm = len(epgmatches)
                        for i in xrange(lepgm):
                            servicerefS, eitS, nameS, beginS, durationS, shortdescS, extdescS = epgmatches[((i + idx + 1) % lepgm)]
                            if self.checkSimilarity(timer, name, nameS, shortdesc, shortdescS, extdesc, extdescS, force=True):
                                if eitS not in similardict:
                                    print('[AutoTimer] Found similar Timer: ' + name)
                                    newEntry.conflictString = conflictString
                                    similardict[eit] = newEntry
                                    similardict[eitS] = newEntry
                                    similarTimer = True
                                    if beginS <= evtBegin:
                                        epgmatches.append((servicerefS, eitS, nameS, beginS, durationS, shortdescS, extdescS))
                                else:
                                    similarTimer = False
                                    newEntry = similardict[eitS]
                                break

                if conflicts is None:
                    timer.decrementCounter()
                    new += 1
                    newEntry.extdesc = extdesc
                    timerdict[serviceref].append(newEntry)
                    if renameTimer is not None and timer.series_labeling:
                        renameTimer(newEntry, name, evtBegin, evtEnd)
                    if similarTimer:
                        similars.append((name, begin, end, serviceref, timer.name))
                        similardict.clear()
                elif not similarTimer:
                    conflicting.append((name, begin, end, serviceref, timer.name))
                    if config.plugins.autotimer.disabled_on_conflict.value:
                        msg = '[AutoTimer] Timer disabled because of conflicts with %s.' % conflictString
                        print(msg)
                        newEntry.log(503, msg)
                        newEntry.disabled = True
                        conflicts = recordHandler.record(newEntry)

        self.result = (
         new, modified)
        self.completed.append(taskname)
        sleep(0.5)
        return

    def JobMessage(self):
        if self.callback is not None:
            if self.simulateOnly == True:
                self.callback(self.autotimers, self.skipped)
            else:
                total = self.new + self.modified + len(self.conflicting) + len(self.existing) + len(self.similars)
                _result = (total, self.new, self.modified, self.autotimers, self.conflicting, self.similars, self.existing, self.skipped)
                self.callback(_result)
        elif self.autoPoll:
            if self.conflicting and config.plugins.autotimer.notifconflict.value:
                AddPopup(_('%d conflict(s) encountered when trying to add new timers:\n%s') % (len(self.conflicting), ('\n').join([ _('%s: %s at %s') % (x[4], x[0], FuzzyTime(x[2])) for x in self.conflicting ])), MessageBox.TYPE_INFO, config.plugins.autotimer.popup_timeout.value, CONFLICTNOTIFICATIONID)
            elif self.similars and config.plugins.autotimer.notifsimilar.value:
                AddPopup(_('%d conflict(s) solved with similar timer(s):\n%s') % (len(self.similars), ('\n').join([ _('%s: %s at %s') % (x[4], x[0], FuzzyTime(x[2])) for x in self.similars ])), MessageBox.TYPE_INFO, config.plugins.autotimer.popup_timeout.value, SIMILARNOTIFICATIONID)
        else:
            AddPopup(_('Found a total of %d matching Events.\n%d Timer were added and\n%d modified,\n%d conflicts encountered,\n%d unchanged,\n%d similars added.') % (self.new + self.modified + len(self.conflicting) + len(self.existing) + len(self.similars), self.new, self.modified, len(self.conflicting), len(self.existing), len(self.similars)), MessageBox.TYPE_INFO, config.plugins.autotimer.popup_timeout.value, NOTIFICATIONID)
        return

    def populateTimerdict(self, epgcache, recordHandler, timerdict):
        for timer in chain(recordHandler.timer_list, recordHandler.processed_timers):
            if timer and timer.service_ref:
                if timer.eit is not None:
                    event = epgcache.lookupEventId(timer.service_ref.ref, timer.eit)
                    if event:
                        timer.extdesc = event.getExtendedDescription() or ''
                    else:
                        timer.extdesc = ''
                elif not hasattr(timer, 'extdesc'):
                    timer.extdesc = ''
                timerdict[str(timer.service_ref)].append(timer)

        return

    def modifyTimer(self, timer, name, shortdesc, begin, end, serviceref, eit):
        timer.description = shortdesc
        timer.begin = int(begin)
        timer.end = int(end)
        timer.service_ref = ServiceReference(serviceref)
        timer.eit = eit

    def addDirectoryToMovieDict(self, moviedict, dest, serviceHandler):
        movielist = serviceHandler.list(eServiceReference('2:0:1:0:0:0:0:0:0:0:' + dest))
        if movielist is None:
            print('[AutoTimer] listing of movies in ' + dest + ' failed')
        else:
            append = moviedict[dest].append
            while 1:
                movieref = movielist.getNext()
                if not movieref.valid():
                    break
                if movieref.flags & eServiceReference.mustDescent:
                    continue
                info = serviceHandler.info(movieref)
                if info is None:
                    continue
                event = info.getEvent(movieref)
                if event is None:
                    continue
                append({})

        return

    def checkSimilarity(self, timer, name1, name2, shortdesc1, shortdesc2, extdesc1, extdesc2, force=False):
        foundTitle = False
        foundShort = False
        retValue = False
        if name1 and name2:
            foundTitle = 0.8 < SequenceMatcher(lambda x: x == ' ', name1, name2).ratio()
        if foundTitle:
            if timer.searchForDuplicateDescription > 0 or force:
                if shortdesc1 and shortdesc2:
                    foundShort = 0.7 < SequenceMatcher(lambda x: x == ' ', shortdesc1, shortdesc2).ratio()
                    if foundShort:
                        if timer.searchForDuplicateDescription == 2:
                            if extdesc1 and extdesc2:
                                retValue = 0.7 < SequenceMatcher(lambda x: x == ' ', extdesc1, extdesc2).ratio()
                        else:
                            retValue = True
            else:
                retValue = True
        return retValue

    def checkDoubleTimers(self, timer, name1, name2, starttime1, starttime2, endtime1, endtime2, serviceref1, serviceref2, multiple):
        foundTitle = name1 == name2
        foundstart = starttime1 == starttime2
        foundend = endtime1 == endtime2
        foundref = serviceref1 == serviceref2
        return foundTitle and foundstart and foundend and (foundref or not multiple)
# okay decompiling AutoTimer.pyo
